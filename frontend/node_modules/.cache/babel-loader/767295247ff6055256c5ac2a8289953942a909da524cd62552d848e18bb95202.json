{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desktop\\\\FeedBack\\\\frontend\\\\src\\\\components\\\\Feedback\\\\FeedbackForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { ClipLoader } from 'react-spinners';\nimport './FeedbackForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedbackForm = () => {\n  _s();\n  const [faculties, setFaculties] = useState([]);\n  const [feedback, setFeedback] = useState({});\n  const [questions, setQuestions] = useState([]);\n  const [feedbackType, setFeedbackType] = useState(null); // Initially null\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [activeFaculty, setActiveFaculty] = useState(null);\n  const [selectedElectiveFaculties, setSelectedElectiveFaculties] = useState({}); // New state for elective faculties\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!feedbackType) return; // Fetch questions only after feedbackType is selected\n\n    const fetchQuestions = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          setError('Authentication token is missing. Redirecting to login...');\n          setTimeout(() => navigate('/'), 2000);\n          return;\n        }\n        const response = await axios.get(`http://localhost:5000/api/feedback/questions/${feedbackType}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(`Questions for ${feedbackType} fetched successfully:`, response.data);\n        setQuestions(response.data);\n      } catch (err) {\n        console.error('Error fetching questions:', err);\n        setError('Failed to load questions. Please try again.');\n      }\n    };\n    fetchQuestions();\n  }, [feedbackType, navigate]);\n  useEffect(() => {\n    if (!feedbackType) return; // Fetch faculties only after feedbackType is selected\n\n    const fetchFaculties = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          setError('Authentication token is missing. Redirecting to login...');\n          setTimeout(() => navigate('/'), 2000);\n          return;\n        }\n        const response = await axios.get('http://localhost:5000/api/feedback/faculties', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Faculties API Response:', response.data);\n        if (response.data.length === 0) {\n          setError('No faculties found for your course and semester.');\n          return;\n        }\n        setFaculties(response.data);\n\n        // Initialize feedback state for each faculty\n        const initialFeedback = {};\n        response.data.forEach(faculty => {\n          initialFeedback[faculty._id] = Array(questions.length).fill(0);\n        });\n        setFeedback(initialFeedback);\n\n        // Set the first faculty as active by default\n        setActiveFaculty(response.data[0]._id);\n      } catch (err) {\n        console.error('Error fetching faculties:', err);\n        setError('Failed to load faculties. Please try again.');\n      }\n    };\n    fetchFaculties();\n  }, [feedbackType, questions, navigate]);\n  const handleFeedbackTypeChange = type => {\n    setFeedbackType(type);\n    setFeedback({});\n    setActiveFaculty(null);\n    setFaculties([]);\n    setQuestions([]);\n  };\n  const handleQuestionChange = (facultyId, questionIndex, value) => {\n    const clampedValue = Math.max(1, Math.min(5, parseInt(value))); // Clamp value between 1 and 5\n    setFeedback(prev => {\n      const updated = {\n        ...prev\n      };\n      updated[facultyId][questionIndex] = clampedValue;\n      return updated;\n    });\n  };\n  const handleElectiveChange = (courseId, facultyId) => {\n    setSelectedElectiveFaculties(prev => ({\n      ...prev,\n      [courseId]: facultyId\n    }));\n  };\n  const groupElectiveFaculties = faculties => {\n    const grouped = {};\n    faculties.forEach(faculty => {\n      if (faculty.isElective) {\n        if (!grouped[faculty.courseName]) {\n          grouped[faculty.courseName] = [];\n        }\n        grouped[faculty.courseName].push(faculty);\n      }\n    });\n    return grouped;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    // Validate that all questions are filled with values between 1 and 5\n    for (const facultyId in feedback) {\n      const scores = feedback[facultyId];\n      if (scores.length !== questions.length || scores.some(score => score < 1 || score > 5 || isNaN(score))) {\n        setError('All questions must be filled with values between 1 and 5.');\n        setLoading(false);\n        return;\n      }\n    }\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('http://localhost:5000/api/feedback/submit', {\n        feedback\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      navigate('/feedback-submitted');\n    } catch (err) {\n      setError('Failed to submit feedback. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const renderFacultyPanel = faculty => {\n    if (faculty.isElective) {\n      // Only Varshini/Jeyavelu case will reach here\n      const electiveFaculties = faculties.filter(f => f.courseId === faculty.courseId && f.isElective);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"faculty-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Elective Faculty Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elective-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Faculty:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedElectiveFaculties[faculty.courseId] || '',\n            onChange: e => handleElectiveChange(faculty.courseId, e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Choose a faculty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), electiveFaculties.map(ef => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: ef._id,\n              children: ef.facultyName\n            }, ef._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), selectedElectiveFaculties[faculty.courseId] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questions-container\",\n          children: questions.map((question, i) => {\n            var _feedback$selectedEle;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                min: \"1\",\n                max: \"5\",\n                value: ((_feedback$selectedEle = feedback[selectedElectiveFaculties[faculty.courseId]]) === null || _feedback$selectedEle === void 0 ? void 0 : _feedback$selectedEle[i]) || '',\n                onChange: e => handleQuestionChange(selectedElectiveFaculties[faculty.courseId], i, e.target.value),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this)]\n      }, faculty.courseId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this);\n    }\n\n    // Regular faculty panel remains unchanged\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"faculty-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: faculty.facultyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), questions.map((question, i) => {\n        var _feedback$faculty$_id;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            max: \"5\",\n            value: ((_feedback$faculty$_id = feedback[faculty._id]) === null || _feedback$faculty$_id === void 0 ? void 0 : _feedback$faculty$_id[i]) || '',\n            onChange: e => handleQuestionChange(faculty._id, i, e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this);\n      })]\n    }, faculty._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Faculty Feedback Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback-type-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `feedback-type-button ${feedbackType === 'Pre-Feedback' ? 'active' : ''}`,\n        onClick: () => handleFeedbackTypeChange('Pre-Feedback'),\n        children: \"Pre-Feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `feedback-type-button ${feedbackType === 'Post-Feedback' ? 'active' : ''}`,\n        onClick: () => handleFeedbackTypeChange('Post-Feedback'),\n        children: \"Post-Feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), feedbackType && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [faculties.filter(f => f.isElective).length > 0 && renderFacultyPanel(faculties.find(f => f.isElective)), faculties.filter(f => !f.isElective).map(faculty => renderFacultyPanel(faculty)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? /*#__PURE__*/_jsxDEV(ClipLoader, {\n          size: 20,\n          color: \"#fff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 36\n        }, this) : 'Submit Feedback'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n};\n_s(FeedbackForm, \"H/wOsEJwFkVos9eaXnOLhAs5ijQ=\", false, function () {\n  return [useNavigate];\n});\n_c = FeedbackForm;\nexport default FeedbackForm;\nvar _c;\n$RefreshReg$(_c, \"FeedbackForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","ClipLoader","jsxDEV","_jsxDEV","FeedbackForm","_s","faculties","setFaculties","feedback","setFeedback","questions","setQuestions","feedbackType","setFeedbackType","loading","setLoading","error","setError","activeFaculty","setActiveFaculty","selectedElectiveFaculties","setSelectedElectiveFaculties","navigate","fetchQuestions","token","localStorage","getItem","setTimeout","response","get","headers","Authorization","console","log","data","err","fetchFaculties","length","initialFeedback","forEach","faculty","_id","Array","fill","handleFeedbackTypeChange","type","handleQuestionChange","facultyId","questionIndex","value","clampedValue","Math","max","min","parseInt","prev","updated","handleElectiveChange","courseId","groupElectiveFaculties","grouped","isElective","courseName","push","handleSubmit","e","preventDefault","scores","some","score","isNaN","post","renderFacultyPanel","electiveFaculties","filter","f","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","required","map","ef","facultyName","question","i","_feedback$selectedEle","_feedback$faculty$_id","onClick","onSubmit","find","disabled","size","color","_c","$RefreshReg$"],"sources":["D:/Desktop/FeedBack/frontend/src/components/Feedback/FeedbackForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport './FeedbackForm.css';\r\n\r\nconst FeedbackForm = () => {\r\n    const [faculties, setFaculties] = useState([]);\r\n    const [feedback, setFeedback] = useState({});\r\n    const [questions, setQuestions] = useState([]);\r\n    const [feedbackType, setFeedbackType] = useState(null); // Initially null\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [activeFaculty, setActiveFaculty] = useState(null);\r\n    const [selectedElectiveFaculties, setSelectedElectiveFaculties] = useState({}); // New state for elective faculties\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (!feedbackType) return; // Fetch questions only after feedbackType is selected\r\n\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const token = localStorage.getItem('token');\r\n                if (!token) {\r\n                    setError('Authentication token is missing. Redirecting to login...');\r\n                    setTimeout(() => navigate('/'), 2000);\r\n                    return;\r\n                }\r\n\r\n                const response = await axios.get(\r\n                    `http://localhost:5000/api/feedback/questions/${feedbackType}`,\r\n                    { headers: { Authorization: `Bearer ${token}` } }\r\n                );\r\n                console.log(`Questions for ${feedbackType} fetched successfully:`, response.data);\r\n                setQuestions(response.data);\r\n            } catch (err) {\r\n                console.error('Error fetching questions:', err);\r\n                setError('Failed to load questions. Please try again.');\r\n            }\r\n        };\r\n\r\n        fetchQuestions();\r\n    }, [feedbackType, navigate]);\r\n\r\n    useEffect(() => {\r\n        if (!feedbackType) return; // Fetch faculties only after feedbackType is selected\r\n\r\n        const fetchFaculties = async () => {\r\n            try {\r\n                const token = localStorage.getItem('token');\r\n                if (!token) {\r\n                    setError('Authentication token is missing. Redirecting to login...');\r\n                    setTimeout(() => navigate('/'), 2000);\r\n                    return;\r\n                }\r\n\r\n                const response = await axios.get('http://localhost:5000/api/feedback/faculties', {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                console.log('Faculties API Response:', response.data);\r\n\r\n                if (response.data.length === 0) {\r\n                    setError('No faculties found for your course and semester.');\r\n                    return;\r\n                }\r\n\r\n                setFaculties(response.data);\r\n\r\n                // Initialize feedback state for each faculty\r\n                const initialFeedback = {};\r\n                response.data.forEach((faculty) => {\r\n                    initialFeedback[faculty._id] = Array(questions.length).fill(0);\r\n                });\r\n                setFeedback(initialFeedback);\r\n\r\n                // Set the first faculty as active by default\r\n                setActiveFaculty(response.data[0]._id);\r\n            } catch (err) {\r\n                console.error('Error fetching faculties:', err);\r\n                setError('Failed to load faculties. Please try again.');\r\n            }\r\n        };\r\n\r\n        fetchFaculties();\r\n    }, [feedbackType, questions, navigate]);\r\n\r\n    const handleFeedbackTypeChange = (type) => {\r\n        setFeedbackType(type);\r\n        setFeedback({});\r\n        setActiveFaculty(null);\r\n        setFaculties([]);\r\n        setQuestions([]);\r\n    };\r\n\r\n    const handleQuestionChange = (facultyId, questionIndex, value) => {\r\n        const clampedValue = Math.max(1, Math.min(5, parseInt(value))); // Clamp value between 1 and 5\r\n        setFeedback((prev) => {\r\n            const updated = { ...prev };\r\n            updated[facultyId][questionIndex] = clampedValue;\r\n            return updated;\r\n        });\r\n    };\r\n\r\n    const handleElectiveChange = (courseId, facultyId) => {\r\n        setSelectedElectiveFaculties((prev) => ({\r\n            ...prev,\r\n            [courseId]: facultyId,\r\n        }));\r\n    };\r\n\r\n    const groupElectiveFaculties = (faculties) => {\r\n        const grouped = {};\r\n        faculties.forEach((faculty) => {\r\n            if (faculty.isElective) {\r\n                if (!grouped[faculty.courseName]) {\r\n                    grouped[faculty.courseName] = [];\r\n                }\r\n                grouped[faculty.courseName].push(faculty);\r\n            }\r\n        });\r\n        return grouped;\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError('');\r\n\r\n        // Validate that all questions are filled with values between 1 and 5\r\n        for (const facultyId in feedback) {\r\n            const scores = feedback[facultyId];\r\n            if (scores.length !== questions.length || scores.some((score) => score < 1 || score > 5 || isNaN(score))) {\r\n                setError('All questions must be filled with values between 1 and 5.');\r\n                setLoading(false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n\r\n            await axios.post(\r\n                'http://localhost:5000/api/feedback/submit',\r\n                { feedback },\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n            navigate('/feedback-submitted');\r\n        } catch (err) {\r\n            setError('Failed to submit feedback. Please try again.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const renderFacultyPanel = (faculty) => {\r\n        if (faculty.isElective) {\r\n            // Only Varshini/Jeyavelu case will reach here\r\n            const electiveFaculties = faculties.filter(\r\n                (f) => f.courseId === faculty.courseId && f.isElective\r\n            );\r\n\r\n            return (\r\n                <div key={faculty.courseId} className=\"faculty-panel\">\r\n                    <h3>Elective Faculty Selection</h3>\r\n                    <div className=\"elective-container\">\r\n                        <label>Select Faculty:</label>\r\n                        <select\r\n                            value={selectedElectiveFaculties[faculty.courseId] || ''}\r\n                            onChange={(e) => handleElectiveChange(faculty.courseId, e.target.value)}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Choose a faculty</option>\r\n                            {electiveFaculties.map((ef) => (\r\n                                <option key={ef._id} value={ef._id}>\r\n                                    {ef.facultyName}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    {selectedElectiveFaculties[faculty.courseId] && (\r\n                        <div className=\"questions-container\">\r\n                            {questions.map((question, i) => (\r\n                                <div key={i} className=\"question\">\r\n                                    <label>{question}</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        min=\"1\"\r\n                                        max=\"5\"\r\n                                        value={feedback[selectedElectiveFaculties[faculty.courseId]]?.[i] || ''}\r\n                                        onChange={(e) => handleQuestionChange(selectedElectiveFaculties[faculty.courseId], i, e.target.value)}\r\n                                        required\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // Regular faculty panel remains unchanged\r\n        return (\r\n            <div key={faculty._id} className=\"faculty-panel\">\r\n                <h3>{faculty.facultyName}</h3>\r\n                {questions.map((question, i) => (\r\n                    <div key={i} className=\"question\">\r\n                        <label>{question}</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            max=\"5\"\r\n                            value={feedback[faculty._id]?.[i] || ''}\r\n                            onChange={(e) => handleQuestionChange(faculty._id, i, e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"feedback-container\">\r\n            <h2>Faculty Feedback Form</h2>\r\n            {error && <p className=\"error\">{error}</p>}\r\n            <div className=\"feedback-type-selector\">\r\n                <button\r\n                    className={`feedback-type-button ${feedbackType === 'Pre-Feedback' ? 'active' : ''}`}\r\n                    onClick={() => handleFeedbackTypeChange('Pre-Feedback')}\r\n                >\r\n                    Pre-Feedback\r\n                </button>\r\n                <button\r\n                    className={`feedback-type-button ${feedbackType === 'Post-Feedback' ? 'active' : ''}`}\r\n                    onClick={() => handleFeedbackTypeChange('Post-Feedback')}\r\n                >\r\n                    Post-Feedback\r\n                </button>\r\n            </div>\r\n            {feedbackType && (\r\n                <form onSubmit={handleSubmit}>\r\n                    {/* Show elective faculties first */}\r\n                    {faculties.filter(f => f.isElective).length > 0 && \r\n                        renderFacultyPanel(faculties.find(f => f.isElective))\r\n                    }\r\n                    {/* Then show all non-elective faculties */}\r\n                    {faculties.filter(f => !f.isElective).map(faculty => \r\n                        renderFacultyPanel(faculty)\r\n                    )}\r\n                    <button type=\"submit\" disabled={loading}>\r\n                        {loading ? <ClipLoader size={20} color=\"#fff\" /> : 'Submit Feedback'}\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FeedbackForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}